#version 330 core

//from opengl-tutorial.org Tutorial - changed

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D myNormalTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightColor;
uniform float LightPower;

void main(){
	// Extract the normal from the normal map  
	vec3 normal = normalize(texture2D(myNormalTextureSampler, UV).rgb * 2.0 - 1.0);

	// Determine where the light is positioned 
	vec3 light_pos = normalize(vec3(0,-50,0)); 

	// Calculate the lighting diffuse value  
	float diffuse = max(dot(normal, light_pos), 0.0);  
  
	// Material properties
	vec4 MaterialDiffuseColor = vec4(diffuse * texture2D(myTextureSampler, UV).rgb, texture2D(myTextureSampler, UV).a);
	vec4 MaterialAmbientColor = vec4(0.2,0.2,0.2,1.0) * MaterialDiffuseColor;
	vec4 MaterialSpecularColor = vec4(0.4,0.4,0.4,1.0);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * vec4(LightColor, 1.0) * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * vec4(LightColor, 1.0) * LightPower * pow(cosAlpha,5) / (distance*distance);

}
